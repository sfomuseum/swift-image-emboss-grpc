// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: image_embosser/image_embosser.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - org_sfomuseum_image_embosser.ImageEmbosser

/// Namespace containing generated types for the "org_sfomuseum_image_embosser.ImageEmbosser" service.
public enum OrgSfomuseumImageEmbosser_ImageEmbosser {
    /// Service descriptor for the "org_sfomuseum_image_embosser.ImageEmbosser" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "org_sfomuseum_image_embosser.ImageEmbosser")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "EmbossImage" metadata.
        public enum EmbossImage {
            /// Request type for "EmbossImage".
            public typealias Input = OrgSfomuseumImageEmbosser_EmbossImageRequest
            /// Response type for "EmbossImage".
            public typealias Output = OrgSfomuseumImageEmbosser_EmbossImageResponse
            /// Descriptor for "EmbossImage".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "org_sfomuseum_image_embosser.ImageEmbosser"),
                method: "EmbossImage"
            )
        }
        /// Descriptors for all methods in the "org_sfomuseum_image_embosser.ImageEmbosser" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            EmbossImage.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "org_sfomuseum_image_embosser.ImageEmbosser" service.
    public static let orgSfomuseumImageEmbosser_ImageEmbosser = GRPCCore.ServiceDescriptor(fullyQualifiedService: "org_sfomuseum_image_embosser.ImageEmbosser")
}

// MARK: org_sfomuseum_image_embosser.ImageEmbosser (server)

extension OrgSfomuseumImageEmbosser_ImageEmbosser {
    /// Streaming variant of the service protocol for the "org_sfomuseum_image_embosser.ImageEmbosser" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "EmbossImage" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `OrgSfomuseumImageEmbosser_EmbossImageRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `OrgSfomuseumImageEmbosser_EmbossImageResponse` messages.
        func embossImage(
            request: GRPCCore.StreamingServerRequest<OrgSfomuseumImageEmbosser_EmbossImageRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<OrgSfomuseumImageEmbosser_EmbossImageResponse>
    }

    /// Service protocol for the "org_sfomuseum_image_embosser.ImageEmbosser" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    public protocol ServiceProtocol: OrgSfomuseumImageEmbosser_ImageEmbosser.StreamingServiceProtocol {
        /// Handle the "EmbossImage" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `OrgSfomuseumImageEmbosser_EmbossImageRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `OrgSfomuseumImageEmbosser_EmbossImageResponse` message.
        func embossImage(
            request: GRPCCore.ServerRequest<OrgSfomuseumImageEmbosser_EmbossImageRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<OrgSfomuseumImageEmbosser_EmbossImageResponse>
    }

    /// Simple service protocol for the "org_sfomuseum_image_embosser.ImageEmbosser" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    public protocol SimpleServiceProtocol: OrgSfomuseumImageEmbosser_ImageEmbosser.ServiceProtocol {
        /// Handle the "EmbossImage" method.
        ///
        /// - Parameters:
        ///   - request: A `OrgSfomuseumImageEmbosser_EmbossImageRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `OrgSfomuseumImageEmbosser_EmbossImageResponse` to respond with.
        func embossImage(
            request: OrgSfomuseumImageEmbosser_EmbossImageRequest,
            context: GRPCCore.ServerContext
        ) async throws -> OrgSfomuseumImageEmbosser_EmbossImageResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
extension OrgSfomuseumImageEmbosser_ImageEmbosser.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: OrgSfomuseumImageEmbosser_ImageEmbosser.Method.EmbossImage.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<OrgSfomuseumImageEmbosser_EmbossImageRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<OrgSfomuseumImageEmbosser_EmbossImageResponse>(),
            handler: { request, context in
                try await self.embossImage(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension OrgSfomuseumImageEmbosser_ImageEmbosser.ServiceProtocol {
    public func embossImage(
        request: GRPCCore.StreamingServerRequest<OrgSfomuseumImageEmbosser_EmbossImageRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<OrgSfomuseumImageEmbosser_EmbossImageResponse> {
        let response = try await self.embossImage(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension OrgSfomuseumImageEmbosser_ImageEmbosser.SimpleServiceProtocol {
    public func embossImage(
        request: GRPCCore.ServerRequest<OrgSfomuseumImageEmbosser_EmbossImageRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<OrgSfomuseumImageEmbosser_EmbossImageResponse> {
        return GRPCCore.ServerResponse<OrgSfomuseumImageEmbosser_EmbossImageResponse>(
            message: try await self.embossImage(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: org_sfomuseum_image_embosser.ImageEmbosser (client)

extension OrgSfomuseumImageEmbosser_ImageEmbosser {
    /// Generated client protocol for the "org_sfomuseum_image_embosser.ImageEmbosser" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    public protocol ClientProtocol: Sendable {
        /// Call the "EmbossImage" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `OrgSfomuseumImageEmbosser_EmbossImageRequest` message.
        ///   - serializer: A serializer for `OrgSfomuseumImageEmbosser_EmbossImageRequest` messages.
        ///   - deserializer: A deserializer for `OrgSfomuseumImageEmbosser_EmbossImageResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func embossImage<Result>(
            request: GRPCCore.ClientRequest<OrgSfomuseumImageEmbosser_EmbossImageRequest>,
            serializer: some GRPCCore.MessageSerializer<OrgSfomuseumImageEmbosser_EmbossImageRequest>,
            deserializer: some GRPCCore.MessageDeserializer<OrgSfomuseumImageEmbosser_EmbossImageResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<OrgSfomuseumImageEmbosser_EmbossImageResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "org_sfomuseum_image_embosser.ImageEmbosser" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "EmbossImage" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `OrgSfomuseumImageEmbosser_EmbossImageRequest` message.
        ///   - serializer: A serializer for `OrgSfomuseumImageEmbosser_EmbossImageRequest` messages.
        ///   - deserializer: A deserializer for `OrgSfomuseumImageEmbosser_EmbossImageResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func embossImage<Result>(
            request: GRPCCore.ClientRequest<OrgSfomuseumImageEmbosser_EmbossImageRequest>,
            serializer: some GRPCCore.MessageSerializer<OrgSfomuseumImageEmbosser_EmbossImageRequest>,
            deserializer: some GRPCCore.MessageDeserializer<OrgSfomuseumImageEmbosser_EmbossImageResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<OrgSfomuseumImageEmbosser_EmbossImageResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: OrgSfomuseumImageEmbosser_ImageEmbosser.Method.EmbossImage.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension OrgSfomuseumImageEmbosser_ImageEmbosser.ClientProtocol {
    /// Call the "EmbossImage" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `OrgSfomuseumImageEmbosser_EmbossImageRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func embossImage<Result>(
        request: GRPCCore.ClientRequest<OrgSfomuseumImageEmbosser_EmbossImageRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<OrgSfomuseumImageEmbosser_EmbossImageResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.embossImage(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<OrgSfomuseumImageEmbosser_EmbossImageRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<OrgSfomuseumImageEmbosser_EmbossImageResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension OrgSfomuseumImageEmbosser_ImageEmbosser.ClientProtocol {
    /// Call the "EmbossImage" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func embossImage<Result>(
        _ message: OrgSfomuseumImageEmbosser_EmbossImageRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<OrgSfomuseumImageEmbosser_EmbossImageResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<OrgSfomuseumImageEmbosser_EmbossImageRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.embossImage(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}